@inject TodoList.Data.Repository.IRepository repository;

@page "/todo"

@*<h3>Todo</h3>*@
@using TodoList.Models

<div class="container-fluid">
    <div class="row">
        <div class="col">
            <h2 class="text-center">Todo (@repository.GetItems().Count(x=>!x.IsDone))</h2>
            <table class="table table-striped">
                <thead class="table-dark">
                    <tr>
                        <th scope="col">Title</th>
                        <th scope="col">Is done</th>
                        <th scope="col"></th>
                    </tr>
                </thead>
                    @foreach (var item in @repository.GetItems())
                    {
                        <tbody>
                            <tr>
                                <td>
                                    <div style="@(item.IsDone ? "color: green; text-decoration: line-through" : "color: red")">
                                        @if(IsEdited(item.Id))
                                        {
                                            <input class="form-control" placeholder="type somth..." @bind="edited.Title"/>
                                        }
                                        else
                                        {
                                            @item.Title
                                        }
                                    </div>
                                </td>
                                <td>
                                    @if (item.IsDone)
                                    {
                                        <input type="checkbox" checked="checked" value="@item.IsDone" @onchange="(() => StatusChanger(item))" />
                                    }
                                    else
                                    {
                                        <input type="checkbox" value="@item.IsDone" @onchange="(() => StatusChanger(item))" />
                                    }

                                </td>
                                <td>
                                    <div class="btn-group">
                                        <button class="btn btn-danger" @onclick="(()=>DeleteToDo(item))">Delete</button>
                                            @if(!IsEdited(item.Id))
                                            { 
                                                <button class="btn btn-info" @onclick="(()=>EditItem(item))">Edit</button>
                                            }
                                            else
                                            { 
                                                <button class="btn btn-success" @onclick="(()=>UpdateItem())">Update</button>
                                            }
                                    </div>
                                </td>
                            </tr>
                        </tbody>
                    }
                <tfoot>

                </tfoot>
            </table>
            <div class="row">
                <div class="col">
                    <input class="form-control" placeholder="type somth..." @bind="newToDo"/>
                </div>
                <div class="col">
                    <button class="btn btn-success" @onclick="AddToDo">Add</button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private IEnumerable<TodoItem> todos =  new List<TodoItem>();


    protected override void OnInitialized()
    {
        todos = repository.GetItems();
    }

    private string newToDo;

    private void AddToDo()
    {
        if (!String.IsNullOrWhiteSpace(newToDo))
        {
            repository.Add(new TodoItem() {Title = newToDo});
            edited=new TodoItem();
        };

        newToDo = "";
    }

    private TodoItem edited = new TodoItem();

    private void EditItem(TodoItem edited)
    {
        this.edited = edited;
    }

    private bool IsEdited(int id)
    {
        return edited.Id==id;
    }

    private void UpdateItem()
    {
        repository.Update(edited);
        edited=new TodoItem();
    }

    private void DeleteToDo(TodoItem deleted)
    {
        repository.Remove(deleted.Id);
        edited = new TodoItem();
    }

    private void StatusChanger(TodoItem itemToChange)
    {
        itemToChange.IsDone = !itemToChange.IsDone;
        repository.Update(itemToChange);
    }
}
